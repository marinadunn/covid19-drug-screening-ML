---------------------------------------------------------------------------------------------------------------------------------------------------------
Description: Concatenate the global_add_pool embedding values which are obtained after each of the 3 GCN layer.
Training: Batch Size - 32, Epochs - 200, Loss Function - BCELose
Performance: Accuracy: 0.6539

    def forward(self, data):
        x, edge_index, batch = data.x, data.edge_index, data.batch

        x = self.conv1(x, edge_index)
        x = F.relu(x)

        x1 = F.relu(global_add_pool(x, batch))
        x = F.relu(x)

        x = self.conv2(x, edge_index)
        x = F.relu(x)

        x2 = F.relu(global_add_pool(x, batch))
        x = F.relu(x)

        x = self.conv3(x, edge_index)
        x = F.relu(x)

        x3 = F.relu(global_add_pool(x, batch))
        x = torch.cat((x1,x2,x3),1)

        x = self.lin1(x)
        x = F.relu(x)

        x = self.lin2(x)
        x = F.relu(x)

        x = self.lin3(x)

        return torch.sigmoid(x)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Description: Similar to the above architecture concatenate the global_max_pool embedding values which are obtained after each of the 3 GCN layer.
Training: Batch Size - 32, Epochs - 200, Loss Function - BCELose
Performance: Accuracy: 0.6531
---------------------------------------------------------------------------------------------------------------------------------------------------------
Description: 3 GCN Layers with a global max pool layer that feeds into 2 linear layers
Training: Batch Size - 32, Epochs - 200, Loss Function - BCELose
Performance: Accuracy: 0.7578

    def forward(self, data):
        x, edge_index, batch = data.x, data.edge_index, data.batch

        # edge_index, _ = remove_self_loops(edge_index)
        # edge_index, _ = add_self_loops(edge_index,num_nodes=x.size(0))
        # print(type(edge_index))

        x = self.conv1(x, edge_index)
        x = F.relu(x)

        x = self.conv2(x, edge_index)
        x = F.relu(x)

        x = self.conv3(x, edge_index)
        x = F.relu(x)

        x = F.relu(global_max_pool(x, batch))

        x = self.lin1(x)
        x = F.relu(x)

        x = self.lin2(x)

        return torch.sigmoid(x)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Description: 2 GAT Layers with a global max pool layer that feeds into 2 linear layers
Training: Batch Size - 32, Epochs - 200, Loss Function - BCELose
Performance: Accuracy: 0.6429

    def forward(self, data):
        x, edge_index, batch = data.x, data.edge_index, data.batch

        x = self.GATconv1(x, edge_index)
        x = F.relu(x)

        x = self.GATconv2(x, edge_index)
        x = F.relu(x)

        x = F.relu(global_max_pool(x, batch))

        x = self.lin1(x)
        x = F.relu(x)

        x = self.lin2(x)

        return torch.sigmoid(x)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Description: 3 GAT Layers with a global max pool layer that feeds into 2 linear layers
Training: Batch Size - 32, Epochs - 200, Loss Function - BCELose
Performance: Accuracy: 0.6484

    def forward(self, data):
        x, edge_index, batch = data.x, data.edge_index, data.batch

        x = self.GATconv1(x, edge_index)
        x = F.relu(x)

        x = self.GATconv2(x, edge_index)
        x = F.relu(x)

        x = self.GATconv3(x, edge_index)
        x = F.relu(x)

        x = F.relu(global_max_pool(x, batch))

        x = self.lin1(x)
        x = F.relu(x)

        x = self.lin2(x)

        return torch.sigmoid(x)
---------------------------------------------------------------------------------------------------------------------------------------------------------